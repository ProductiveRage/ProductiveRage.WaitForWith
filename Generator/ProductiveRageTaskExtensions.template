using System.Diagnostics;

namespace System.Threading.Tasks
{
    /// <summary>
    /// Extension methods for Tasks that return values that provide functionality similar to Task.WhenAll except that the return values are accessible in a Tuple, making them easy to retrieve (when using Task.WhenAll with Tasks that return different result types,
    /// the options are to access the original Tasks' Result values or to call it and explicitly set its TResult type parameter to object and cast the items in the returned array to the appropriate types - even if Task.WhenAll is used with Tasks that all return
    /// the same type, there is potential for error in it returning an array because calling code could try to access an item outside the bounds of the array and fail at runtime, which is not possible if these methods are used because a Tuple of values is
    /// returned instead of an array).
    /// </summary>
    public static class ProductiveRageTaskExtensions
    {
        # Start Here

        private static Task WaitWithPossibilityOfCancellation(Task work, CancellationToken cancellationToken)
        {
            ThrowForNullTask(work, nameof(work));

            return cancellationToken.CanBeCanceled
                ? WaitWithPossibilityOfCancellation(work, cancellationToken.AsTask())
                : work;
        }

        private static async Task WaitWithPossibilityOfCancellation(Task work, Task cancellerIfAny)
        {
            ThrowForNullTask(work, nameof(work));

            if (cancellerIfAny is null)
            {
                await work.ConfigureAwait(false);
                return;
            }

            var taskThatWon = await Task.WhenAny(work, cancellerIfAny).ConfigureAwait(false);
            if (taskThatWon == cancellerIfAny)
                throw new OperationCanceledException();
        }

        private static Task AsTask(this CancellationToken cancellationToken) // Courtesy of https://github.com/StephenCleary/AsyncEx
        {
            var tcs = new TaskCompletionSource<object>();
            cancellationToken.Register(
                () => tcs.TrySetCanceled(),
                useSynchronizationContext: false
            );
            return tcs.Task;
        }

        [DebuggerStepThrough]
        private static void ThrowForNullTask(Task value, string parameterName)
        {
            if (value is null)
                throw new ArgumentNullException(parameterName);
        }

        [DebuggerStepThrough]
        private static void ThrowForNegativeTimeout(TimeSpan value, string timeoutParameterName)
        {
            if (value.Ticks < 0)
                throw new ArgumentOutOfRangeException(timeoutParameterName, "must be zero / default(meaning do-not-timeout) or a positive duration");
        }
    }
}